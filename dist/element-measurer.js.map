{"version":3,"file":"element-measurer.js","mappings":"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","sources":["webpack://ElementMeasurer/webpack/universalModuleDefinition","webpack://ElementMeasurer/webpack/bootstrap","webpack://ElementMeasurer/webpack/runtime/define property getters","webpack://ElementMeasurer/webpack/runtime/hasOwnProperty shorthand","webpack://ElementMeasurer/webpack/runtime/make namespace object","webpack://ElementMeasurer/./src/element-measurer.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ElementMeasurer\"] = factory();\n\telse\n\t\troot[\"ElementMeasurer\"] = factory();\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export type AllowedTarget = HTMLElement|Element|Window|Document|string;\n\n/**\n * Expressions top and left offset values.\n *\n * @export\n * @interface Offsets\n */\nexport interface Offsets {\n  top: number;\n  left: number;\n}\n\n/**\n * The library class that can measures size of element.\n *\n * @export\n * @class ElementMeasurer\n */\nexport class ElementMeasurer {\n  target: HTMLElement;\n\n  /**\n   * Creates an instance of ElementMeasurer.\n   * @param {AllowedTarget} [target=document.documentElement]\n   * @memberof ElementMeasurer\n   */\n  constructor(target: AllowedTarget = document.documentElement) {\n    this.setTarget(target);\n  }\n\n  /**\n   * Returns whether target is document or html element.\n   *\n   * @readonly\n   * @type {boolean}\n   * @memberof ElementMeasurer\n   */\n  get isDocument(): boolean {\n    return this.target === document.documentElement\n      || this.target === document.body;\n  }\n\n  /**\n   * Returns inner width of an element in pixels.\n   *\n   * @readonly\n   * @type {number}\n   * @memberof ElementMeasurer\n   */\n  get clientWidth(): number {\n    return this.isDocument\n      ? window.innerWidth\n      : this.getRect().width;\n  }\n\n  /**\n   * Returns inner height of an element in pixels.\n   *\n   * @readonly\n   * @type {number}\n   * @memberof ElementMeasurer\n   */\n  get clientHeight(): number {\n    return this.isDocument\n      ? window.innerHeight\n      : this.getRect().height;\n  }\n\n  /**\n   * Gets or sets the number of pixels that an element's content is scrolled vertically.\n   *\n   * @type {number}\n   * @memberof ElementMeasurer\n   */\n  get scrollTop(): number {\n    return this.isDocument ? window.pageYOffset : this.target.scrollTop;\n  }\n\n  set scrollTop(val) {\n    if (this.isDocument) {\n      window.scrollTo(this.scrollLeft, val);\n    } else {\n      this.target.scrollTop = val;\n    }\n  }\n\n  /**\n   * Gets or sets the number of pixels that an element's content is scrolled to the left.\n   *\n   * @type {number}\n   * @memberof ElementMeasurer\n   */\n  get scrollLeft(): number {\n    return this.isDocument ? window.pageXOffset : this.target.scrollLeft;\n  }\n\n  set scrollLeft(val) {\n    if (this.isDocument) {\n      window.scrollTo(val, this.scrollTop);\n    } else {\n      this.target.scrollLeft = val;\n    }\n  }\n\n  /**\n   * Returns the width of the entire content of an element.\n   *\n   * @readonly\n   * @type {number}\n   * @memberof ElementMeasurer\n   */\n  get scrollWidth(): number {\n    return this.target.scrollWidth;\n  }\n\n  /**\n   * Returns the height of the entire content of an element.\n   *\n   * @readonly\n   * @type {number}\n   * @memberof ElementMeasurer\n   */\n  get scrollHeight(): number {\n    return this.target.scrollHeight;\n  }\n\n  /**\n   * Returns maximum top scroll offset possible for the element.\n   *\n   * @readonly\n   * @type {number}\n   * @memberof ElementMeasurer\n   */\n  get maxScrollTop(): number {\n    return this.scrollHeight - this.clientHeight;\n  }\n\n  /**\n   * Returns maximum left scroll offset possible for the element.\n   *\n   * @readonly\n   * @type {number}\n   * @memberof ElementMeasurer\n   */\n  get maxScrollLeft(): number {\n    return this.scrollWidth - this.clientWidth;\n  }\n\n  /**\n   * Set target element.\n   *\n   * @param {AllowedTarget} val target element.\n   * @returns {this}\n   * @memberof ElementMeasurer\n   */\n  setTarget(val: AllowedTarget): this {\n    if (val instanceof HTMLElement || val instanceof Element) {\n      this.target = val as HTMLElement;\n    } else if (val === window || val === document) {\n      this.target = document.documentElement;\n    } else if (typeof val === 'string') {\n      this.target = document.querySelector(val);\n    } else {\n      throw new TypeError('Target value is not correct type.');\n    }\n    return this;\n  }\n\n  /**\n   * Returns top and left values that indicates offset distance to html document.\n   * @see https://stackoverflow.com/questions/442404/retrieve-the-position-x-y-of-an-html-element#answer-442474\n   * @returns {Offsets} {top, left}\n   * @memberof ElementMeasurer\n   */\n  getOffset(): Offsets {\n    let elm = this.target;\n    let top = 0;\n    let left = 0;\n\n    while (elm && !isNaN(elm.offsetLeft) && !isNaN(elm.offsetTop)) {\n      left += elm.offsetLeft - elm.scrollLeft;\n      top += elm.offsetTop - elm.scrollTop;\n      elm = elm.offsetParent as HTMLElement;\n    }\n\n    return { top, left };\n  }\n\n  /**\n   * Returns DOMRect object of the target element.\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\n   * @returns {DOMRect}\n   * @memberof ElementMeasurer\n   */\n  getRect(): DOMRect {\n    return this.target.getBoundingClientRect() as DOMRect;\n  }\n}\n\nexport default ElementMeasurer;\n"],"names":[],"sourceRoot":""}